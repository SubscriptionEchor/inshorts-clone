Project File Scan - Generated on 2025-05-05 03:37:12
================================================================================

File: app.json
Type: .json
--------------------------------------------------------------------------------
{
  "expo": {
    "name": "Inshorts Clone",
    "slug": "inshorts-clone",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/icon.png",
    "userInterfaceStyle": "light",
    "newArchEnabled": true,
    "splash": {
      "image": "./assets/splash.png",
      "resizeMode": "contain",
      "backgroundColor": "#ffffff"
    },
    "ios": {
      "supportsTablet": true
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      }
    },
    "web": {
      "favicon": "./assets/favicon.png",
      "bundler": "metro"
    },
    "plugins": [
      "expo-router",
      "expo-asset"
    ],
    "scheme": "inshorts-clone"
  }
}


================================================================================

File: index.js
Type: .js
--------------------------------------------------------------------------------
import { registerRootComponent } from 'expo';

import App from './App';

// registerRootComponent calls AppRegistry.registerComponent('main', () => App);
// It also ensures that whether you load the app in Expo Go or in a native build,
// the environment is set up appropriately
registerRootComponent(App);


================================================================================

File: babel.config.js
Type: .js
--------------------------------------------------------------------------------
module.exports = function (api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
    plugins: [
      'react-native-reanimated/plugin',
      'expo-router/babel',
      '@babel/plugin-proposal-export-namespace-from',
      [
        'module-resolver',
        {
          alias: {
            '@': './',
          },
        },
      ],
    ],
  };
};


================================================================================

File: package.json
Type: .json
--------------------------------------------------------------------------------
{
  "name": "inshorts-clone",
  "version": "1.0.0",
  "main": "expo-router/entry",
  "scripts": {
    "start": "expo start",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "web": "expo start --web"
  },
  "dependencies": {
    "@expo-google-fonts/inter": "^0.2.3",
    "@expo/vector-icons": "^14.0.0",
    "@react-navigation/bottom-tabs": "^7.3.11",
    "@react-navigation/native": "^7.1.7",
    "@zhenyudu/react-native-snap-carousel": "^3.9.4",
    "axios": "^1.7.7",
    "date-fns": "^4.1.0",
    "expo": "~53.0.0",
    "expo-constants": "~17.1.5",
    "expo-file-system": "~18.1.9",
    "expo-font": "~13.3.1",
    "expo-linking": "~7.1.4",
    "expo-router": "~5.0.5",
    "expo-sharing": "~13.1.5",
    "expo-splash-screen": "~0.30.8",
    "expo-status-bar": "~2.2.3",
    "react": "19.0.0",
    "react-native": "0.79.2",
    "react-native-gesture-handler": "~2.24.0",
    "react-native-loading-spinner-overlay": "^3.0.1",
    "react-native-pager-view": "6.7.1",
    "react-native-reanimated": "~3.17.4",
    "react-native-safe-area-context": "5.4.0",
    "react-native-screens": "~4.10.0",
    "react-native-tab-view": "^4.0.1",
    "react-native-view-shot": "4.0.3",
    "@react-native-async-storage/async-storage": "2.1.2",
    "expo-asset": "~11.1.5"
  },
  "devDependencies": {
    "@babel/core": "^7.23.7",
    "@babel/plugin-proposal-export-namespace-from": "^7.18.9",
    "@types/react": "~19.0.10",
    "babel-plugin-module-resolver": "^5.0.0",
    "typescript": "^5.3.0"
  },
  "overrides": {
    "react": "19.0.0",
    "react-dom": "19.0.0"
  },
  "private": true
}


================================================================================

File: tsconfig.json
Type: .json
--------------------------------------------------------------------------------
{
  "compilerOptions": {},
  "extends": "expo/tsconfig.base"
}


================================================================================

File: rn.txt
Type: .txt
--------------------------------------------------------------------------------


================================================================================

File: App.js
Type: .js
--------------------------------------------------------------------------------
import { StatusBar } from 'expo-status-bar';
import { StyleSheet, Text, View } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <Text>Open up App.js to start working on your app!</Text>
      <StatusBar style="auto" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});


================================================================================

File: .expo/settings.json
Type: .json
--------------------------------------------------------------------------------
{
  "hostType": "lan",
  "lanType": "ip",
  "dev": true,
  "minify": false,
  "urlRandomness": null,
  "https": false,
  "scheme": null
}


================================================================================

File: .expo/README.md
Type: .md
--------------------------------------------------------------------------------
> Why do I have a folder named ".expo" in my project?

The ".expo" folder is created when an Expo project is started using "expo start" command.

> What do the files contain?

- "devices.json": contains information about devices that have recently opened this project. This is used to populate the "Development sessions" list in your development builds.
- "packager-info.json": contains port numbers and process PIDs that are used to serve the application to the mobile device/simulator.
- "settings.json": contains the server configuration that is used to serve the application manifest.

> Should I commit the ".expo" folder?

No, you should not share the ".expo" folder. It does not contain any information that is relevant for other developers working on the project, it is specific to your machine.

Upon project creation, the ".expo" folder is already added to your ".gitignore" file.


================================================================================

File: .expo/devices.json
Type: .json
--------------------------------------------------------------------------------
{
  "devices": []
}


================================================================================

File: types/env.d.ts
Type: .ts
--------------------------------------------------------------------------------
declare global {
  namespace NodeJS {
    interface ProcessEnv {
      EXPO_PUBLIC_API_URL: string;
      EXPO_PUBLIC_API_KEY: string;
    }
  }
}

export {};


================================================================================

File: app/_layout.tsx
Type: .tsx
--------------------------------------------------------------------------------
import React, { useEffect } from 'react';
import { Stack } from 'expo-router';
import Context from '../API/Context';
import { useFonts, Inter_400Regular, Inter_700Bold } from '@expo-google-fonts/inter';
import * as SplashScreen from 'expo-splash-screen';

// Keep the splash screen visible while we fetch resources
SplashScreen.preventAutoHideAsync();

export default function RootLayout() {
    const [fontsLoaded] = useFonts({
        'Inter-Regular': Inter_400Regular,
        'Inter-Bold': Inter_700Bold,
    });

    useEffect(() => {
        if (fontsLoaded) {
            // Hide splash screen once fonts are loaded
            SplashScreen.hideAsync();
        }
    }, [fontsLoaded]);

    if (!fontsLoaded) {
        return null;
    }

    return (
        <Context>
            <Stack screenOptions={{ headerShown: false }}>
                <Stack.Screen name="(tabs)" />
            </Stack>
        </Context>
    );
}

================================================================================

File: app/(tabs)/settings.tsx
Type: .tsx
--------------------------------------------------------------------------------
import { View, Text, StyleSheet, Switch } from 'react-native';
import { useContext } from 'react';
import { NewsContext } from '../../API/Context';

export default function SettingsScreen() {
  const { darkTheme, setDarkTheme } = useContext(NewsContext);

  return (
    <View style={[styles.container, { backgroundColor: darkTheme ? '#282c35' : '#fff' }]}>
      <Text style={[styles.title, { color: darkTheme ? '#fff' : '#1a1a1a' }]}>Settings</Text>
      <View style={styles.settingItem}>
        <Text style={[styles.settingText, { color: darkTheme ? '#fff' : '#1a1a1a' }]}>
          Dark Mode
        </Text>
        <Switch
          value={darkTheme}
          onValueChange={setDarkTheme}
          trackColor={{ false: '#767577', true: '#81b0ff' }}
          thumbColor={darkTheme ? '#007AFF' : '#f4f3f4'}
        />
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
  },
  title: {
    fontFamily: 'Inter-Bold',
    fontSize: 24,
    marginBottom: 20,
    color: '#1a1a1a',
  },
  settingItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 12,
    borderBottomWidth: StyleSheet.hairlineWidth,
    borderBottomColor: '#ccc',
  },
  settingText: {
    fontFamily: 'Inter-Regular',
    fontSize: 18,
  },
});


================================================================================

File: app/(tabs)/index.tsx
Type: .tsx
--------------------------------------------------------------------------------
import React, { useContext } from 'react';
import { View, StyleSheet } from 'react-native';
import { NewsContext } from '../../API/Context';
import NewsScreen from '../../screens/NewsScreen';

export default function HomeScreen() {
  const { darkTheme } = useContext(NewsContext);

  return (
      <View style={[styles.container, { backgroundColor: darkTheme ? '#282c35' : '#fff' }]}>
        <NewsScreen />
      </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
});

================================================================================

File: app/(tabs)/discover.tsx
Type: .tsx
--------------------------------------------------------------------------------
import { View, StyleSheet } from 'react-native';
import DiscoverScreen from '../../screens/DiscoverScreen';
import { useContext } from 'react';
import { NewsContext } from '../../API/Context';

export default function DiscoverTab() {
  const { darkTheme } = useContext(NewsContext);

  return (
    <View style={[styles.container, { backgroundColor: darkTheme ? '#282c35' : '#fff' }]}>
      <DiscoverScreen />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  }
});


================================================================================

File: app/(tabs)/_layout.tsx
Type: .tsx
--------------------------------------------------------------------------------
import { Tabs } from 'expo-router';
import { Ionicons } from '@expo/vector-icons';
import { useContext } from 'react';
import { NewsContext } from '../../API/Context';

export default function TabLayout() {
    const { darkTheme } = useContext(NewsContext);

    return (
        <Tabs screenOptions={{
            headerShown: false,
            tabBarActiveTintColor: darkTheme ? '#007fff' : '#007AFF',
            tabBarInactiveTintColor: '#8E8E93',
            tabBarStyle: {
                backgroundColor: darkTheme ? '#282c35' : '#FFFFFF',
                borderTopColor: darkTheme ? '#333' : '#E5E5EA',
                height: 60,
            },
            tabBarLabelStyle: {
                fontSize: 12,
                marginBottom: 5,
            },
        }}>
            <Tabs.Screen
                name="index"
                options={{
                    title: 'Home',
                    tabBarIcon: ({ color, size }) => <Ionicons name="home" size={size} color={color} />,
                }}
            />
            <Tabs.Screen
                name="discover"
                options={{
                    title: 'Discover',
                    tabBarIcon: ({ color, size }) => <Ionicons name="compass" size={size} color={color} />,
                }}
            />
            <Tabs.Screen
                name="settings"
                options={{
                    title: 'Settings',
                    tabBarIcon: ({ color, size }) => <Ionicons name="person" size={size} color={color} />,
                }}
            />
        </Tabs>
    );
}

================================================================================

File: screens/DiscoverScreen.tsx
Type: .tsx
--------------------------------------------------------------------------------
import React, { useContext } from 'react';
import { Dimensions, Image, StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { NewsContext } from '../API/Context';
import Carousel from '@zhenyudu/react-native-snap-carousel';
import { categories, sources } from '../API/api';
import Search from '../components/Search';

const windowWidth = Dimensions.get('window').width;

const DiscoverScreen = () => {
  const { setCategory, darkTheme, setSource } = useContext(NewsContext);
  const SLIDE_WIDTH = Math.round(windowWidth / 3.5);

  return (
    <View style={styles.container}>
      <Search />
      <Text style={{ ...styles.subtitle, paddingTop: 10, color: darkTheme ? 'white' : 'gray' }}>Categories</Text>
      <Carousel
        data={categories}
        renderItem={({ item, index }) => (
          <TouchableOpacity
            onPress={() => setCategory(item?.name)}
            style={{ ...styles.categoriesStyles }}>
            <Image
              source={{ uri: item?.pic }}
              style={styles.categoryImage}
            />
            <Text
              style={{ ...styles.categoriesName, color: darkTheme ? 'white' : 'gray' }}
            >{item?.name}</Text>
          </TouchableOpacity>
        )}
        sliderWidth={windowWidth}
        itemWidth={SLIDE_WIDTH}
        horizontal={true}
        activeSlideAlignment='start'
        inactiveSlideScale={1}
        inactiveSlideOpacity={2}
      />
      <Text style={{ ...styles.subtitle, color: darkTheme ? 'white' : 'gray' }}>
        Sources
      </Text>
      <View style={styles.sources}>
        {sources.map(s => (
          <TouchableOpacity
            onPress={() => setSource(s?.id)}
            key={s?.id}
            style={styles.sourceContainer}
          >
            <Image
              source={{ uri: s?.pic }}
              style={styles.sourceImage}
            />
          </TouchableOpacity>
        ))}
      </View>
    </View>
  );
};

export default DiscoverScreen;

const styles = StyleSheet.create({
  container: {
    padding: 10,
    alignItems: 'center',
  },
  subtitle: {
    fontSize: 20,
    fontWeight: 'bold',
    paddingBottom: 8,
    marginHorizontal: 5,
    borderBottomColor: '#007fff',
    borderBottomWidth: 5,
    alignSelf: 'flex-start',
    borderRadius: 10,
  },
  categoriesName: {
    textAlign: 'center',
    fontSize: 18,
  },
  categoriesStyles: {
    height: 150,
    margin: 10,
    alignItems: 'center',
    justifyContent: 'space-evenly'
  },
  categoryImage: {
    height: '40%',
    width: '100%',
    resizeMode: 'contain'
  },
  sourceContainer: {
    height: 150,
    width: "40%",
    borderRadius: 10,
    margin: 15,
    backgroundColor: '#cc313d'
  },
  sources: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
    paddingVertical: 15,
  },
  sourceImage: {
    height: '100%',
    borderRadius: 10,
    resizeMode: 'cover'
  }
});


================================================================================

File: screens/NewsScreen.tsx
Type: .tsx
--------------------------------------------------------------------------------
import React, { useContext, useState } from 'react';
import {
  ActivityIndicator,
  Dimensions,
  StyleSheet,
  View,
  StatusBar,
  Text,
  ScrollView,
  SafeAreaView,
  TouchableOpacity
} from 'react-native';
import { useRouter } from 'expo-router';
import { NewsContext } from '../API/Context';
import SingleNews from '../components/SingleNews';
import Carousel from '@zhenyudu/react-native-snap-carousel';

const windowHeight = Dimensions.get('window').height;
const windowWidth = Dimensions.get('window').width;

const NewsScreen = () => {
  const router = useRouter();
  const { loading, news, darkTheme } = useContext(NewsContext);
  const articles = news?.articles;
  const [activeIndex, setActiveIndex] = useState(0);
  const [activeTab, setActiveTab] = useState('My Feed');

  const goToPage = (page) => {
    router.push(page);
  };

  const tabs = [
    { id: 'feed', label: 'My Feed' },
    { id: 'sale', label: 'Instawoooow Sale' },
    { id: 'match', label: 'Match Center' },
    { id: 'videos', label: 'Videos' },
  ];

  return (
      <SafeAreaView style={styles.safeArea}>
        <StatusBar barStyle="light-content" backgroundColor="#000" />

        {/* Tab Navigation - Now using the exact design from the screenshots */}
        <View style={styles.tabContainer}>
          <ScrollView horizontal showsHorizontalScrollIndicator={false}>
            <View style={styles.tabTextContainer}>
              {tabs.map((tab) => (
                  <TouchableOpacity
                      key={tab.id}
                      onPress={() => setActiveTab(tab.label)}
                  >
                    <Text
                        style={activeTab === tab.label ? styles.activeTabText : styles.inactiveTabText}
                    >
                      {tab.label}
                    </Text>
                  </TouchableOpacity>
              ))}
            </View>
          </ScrollView>
        </View>

        {/* Carousel for news swiping */}
        <View style={styles.carousel}>
          {loading ? (
              <ActivityIndicator color="#007AFF" size="large" />
          ) : (
              articles && articles.length > 0 ? (
                  <Carousel
                      data={articles}
                      renderItem={({ item, index }) => (
                          <SingleNews item={item} index={index} darkTheme={darkTheme} />
                      )}
                      sliderHeight={windowHeight - 140} // Adjusted height
                      itemHeight={windowHeight - 140}   // Adjusted height
                      vertical={true}
                      onSnapToItem={(index) => setActiveIndex(index)}
                      enableMomentum={true}
                      decelerationRate={0.9}
                      inactiveSlideOpacity={1}
                      inactiveSlideScale={1}
                  />
              ) : (
                  <View style={styles.noContent}>
                    <Text>No articles available</Text>
                  </View>
              )
          )}
        </View>
      </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: '#000', // Set to black for status bar area
  },
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  tabContainer: {
    backgroundColor: '#000',
    height: 50,
    paddingHorizontal: 10,
    justifyContent: 'center',
  },
  tabTextContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 5,
    height: 50,
  },
  activeTabText: {
    color: '#007AFF',
    fontSize: 16,
    fontWeight: '500',
    marginRight: 20,
  },
  inactiveTabText: {
    color: '#999',
    fontSize: 16,
    marginRight: 20,
  },
  carousel: {
    flex: 1,
    backgroundColor: '#fff',
  },
  noContent: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

export default NewsScreen;

================================================================================

File: components/Search.tsx
Type: .tsx
--------------------------------------------------------------------------------
import React, { useContext, useState } from 'react';
import { Modal, StyleSheet, Text, TextInput, TouchableOpacity, View } from 'react-native';
import { NewsContext } from '../API/Context';
import { Ionicons } from '@expo/vector-icons';
import SingleNews from './SingleNews';

const Search = () => {
  const { news, darkTheme } = useContext(NewsContext);
  const articles = news?.articles;
  const [searchResults, setSearchResults] = useState([]);
  const [modalVisible, setModalVisible] = useState(false);
  const [currentNews, setCurrentNews] = useState({});

  const handleSearch = (text) => {
    if (!text) {
      setSearchResults([]);
      return;
    }
    setSearchResults(articles.filter((q) => q?.title?.includes(text)));
  };

  const handleModal = (n) => {
    setModalVisible(true),
    setCurrentNews(n);
  };

  return (
    <View style={styles.container}>
      <TextInput
        style={{
          ...styles.search,
          backgroundColor: darkTheme ? '#444' : 'lightgray',
          color: darkTheme ? 'white' : 'black'
        }}
        onChangeText={(text) => handleSearch(text)}
        placeholder='Search for News'
        placeholderTextColor={darkTheme ? "#aaa" : 'gray'}
      />
      <View style={styles.searchResults}>
        {searchResults.slice(0, 10).map((n) => (
          <TouchableOpacity
            key={n.title}
            activeOpacity={.9}
            onPress={() => handleModal(n)}
          >
            <Text
              style={{
                ...styles.singleResult,
                backgroundColor: darkTheme ? "black" : "white",
                color: darkTheme ? "white" : 'gray'
              }}
            >
              {n.title}
            </Text>
          </TouchableOpacity>
        ))}
      </View>
      <Modal
        animationType='slide'
        transparent={true}
        visible={modalVisible}
        onRequestClose={() => setModalVisible(!modalVisible)}
      >
        <TouchableOpacity
          onPress={() => setModalVisible(!modalVisible)}
          style={{
            position: 'absolute',
            zIndex: 2,
            right: 0,
            margin: 20,
            marginTop: 40
          }}
        >
          <Ionicons name="close-circle" size={30} color={darkTheme ? "white" : "black"} />
        </TouchableOpacity>
        <View
          style={{
            height: '100%',
          }}
        >
          <SingleNews item={currentNews} darkTheme={darkTheme} index={0} />
        </View>
      </Modal>
    </View>
  );
};

export default Search;

const styles = StyleSheet.create({
  search: {
    height: '100%',
    paddingVertical: 10,
    paddingHorizontal: 15,
    borderRadius: 10,
    fontSize: 15,
    marginBottom: 15,
  },
  container: {
    width: '100%',
    height: 50,
    position: 'relative'
  },
  searchResults: {
    position: 'absolute',
    zIndex: 1,
    top: 80,
    width: '100%'
  },
  singleResult: {
    borderRadius: 5,
    padding: 10,
    margin: 0.5,
    shadowColor: 'black',
    elevation: 5,
  }
});


================================================================================

File: components/SingleNews.tsx
Type: .tsx
--------------------------------------------------------------------------------
import React, { useState } from 'react';
import {
  Dimensions,
  Image,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
  Share,
  Alert,
  ViewShot,
  Platform
} from 'react-native';
import { Linking } from 'react-native';
import { format, parseISO } from 'date-fns';
import { Ionicons } from '@expo/vector-icons';
import * as FileSystem from 'expo-file-system';
import * as Sharing from 'expo-sharing';
import { captureRef } from 'react-native-view-shot';

const windowWidth = Dimensions.get('window').width;
const windowHeight = Dimensions.get('window').height;

type NewsItem = {
  title: string;
  description: string;
  urlToImage: string;
  publishedAt: string;
  author: string;
  content: string;
  url: string;
  source: {
    id: string;
    name: string;
  };
};

type SingleNewsProps = {
  item: NewsItem;
  index: number;
  darkTheme: boolean;
};

const SingleNews = ({ item, index, darkTheme }: SingleNewsProps) => {
  const [isBookmarked, setIsBookmarked] = useState(false);
  const viewShotRef = React.useRef(null);

  const date = parseISO(item?.publishedAt || new Date().toISOString());
  const formattedDate = format(date, 'yyyy-MM-dd');
  const timeAgo = 'few hours ago';

  // Calculate if there's enough content for a quote section (similar to image 1)
  const hasQuoteSection = item?.content && item.content.length > 70;

  // Toggle bookmark
  const toggleBookmark = () => {
    setIsBookmarked(!isBookmarked);
    Alert.alert(
        isBookmarked ? 'Removed from bookmarks' : 'Added to bookmarks',
        '',
        [{ text: 'OK' }],
        { cancelable: true }
    );
    // In a real app, you'd save this to AsyncStorage or a database
  };

  // Share news card
  const shareNews = async () => {
    try {
      // First option: Basic share
      const result = await Share.share({
        message: `${item.title}\n\n${item.description}\n\nRead more: ${item.url}`,
        title: item.title,
      });

      // Advanced implementation would capture the view as an image and share that
      // This requires additional setup with react-native-view-shot and expo-sharing

    } catch (error) {
      console.error('Error sharing:', error);
    }
  };

  return (
      <View style={styles.container} ref={viewShotRef}>
        {/* Image for article if available */}
        {item?.urlToImage && (
            <Image
                style={styles.image}
                source={{ uri: item?.urlToImage }}
                onError={(err) => console.error("Error Setting Image URI: ", err.nativeEvent.error)}
            />
        )}

        <View style={styles.contentContainer}>
          {/* Logo and action buttons */}
          <View style={styles.actionContainer}>
            <View style={styles.logoContainer}>
              <Text style={styles.logoText}>inshorts</Text>
            </View>

            <View style={styles.actionButtons}>
              <TouchableOpacity
                  style={styles.actionButton}
                  onPress={toggleBookmark}
              >
                <Ionicons
                    name={isBookmarked ? "bookmark" : "bookmark-outline"}
                    size={22}
                    color="#000"
                />
              </TouchableOpacity>
              <TouchableOpacity
                  style={styles.actionButton}
                  onPress={shareNews}
              >
                <Ionicons name="share-social-outline" size={22} color="#000" />
              </TouchableOpacity>
            </View>
          </View>

          {/* Headline */}
          <Text style={styles.headline}>{item?.title}</Text>

          {/* Body text */}
          <Text style={styles.bodyText}>{item?.description}</Text>

          {/* Attribution line */}
          <Text style={styles.attribution}>
            {timeAgo} | {item.author || "Unknown"} | {item.source?.name || "News"}
          </Text>

          {/* Optional footer content/quote as seen in the screenshots */}
          {hasQuoteSection && (
              <View style={styles.quoteContainer}>
                <Text style={styles.quoteText}>
                  '{item.content?.slice(0, 60)}...'
                </Text>
                <Text style={styles.quoteAttribution}>
                  {item.source?.name || "Source"} further stated
                </Text>
              </View>
          )}
        </View>
      </View>
  );
};

const styles = StyleSheet.create({
  container: {
    height: windowHeight - 120, // Adjust for tab bars
    width: windowWidth,
    backgroundColor: '#fff',
    flexDirection: 'column',
  },
  image: {
    width: windowWidth,
    height: windowHeight * 0.35,
    resizeMode: 'cover',
  },
  contentContainer: {
    flex: 1,
    padding: 15,
    position: 'relative',
  },
  actionContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 10,
    zIndex: 10,
  },
  logoContainer: {
    backgroundColor: '#f73131',
    padding: 5,
    borderRadius: 4,
  },
  logoText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: 'bold',
  },
  actionButtons: {
    flexDirection: 'row',
  },
  actionButton: {
    marginLeft: 15,
    padding: 5, // Make touch target larger
  },
  headline: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 12,
    color: '#000',
    lineHeight: 26,
  },
  bodyText: {
    fontSize: 16,
    color: '#333',
    lineHeight: 22,
    marginBottom: 15,
  },
  attribution: {
    fontSize: 12,
    color: '#888',
    marginTop: 'auto',
  },
  quoteContainer: {
    backgroundColor: '#333',
    padding: 15,
    marginTop: 15,
    borderRadius: 4,
  },
  quoteText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  quoteAttribution: {
    color: '#ccc',
    fontSize: 14,
    marginTop: 5,
  }
});

export default SingleNews;

================================================================================

File: components/TopNavigation.tsx
Type: .tsx
--------------------------------------------------------------------------------
import React, { useContext } from 'react';
import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { NewsContext } from '../API/Context';
import { Ionicons } from '@expo/vector-icons';

type TopNavigationProps = {
  index: number;
  setIndex: (index: number) => void;
};

const TopNavigation = ({ index, setIndex }: TopNavigationProps) => {
  const { fetchNews, darkTheme, setDarkTheme } = useContext(NewsContext);

  return (
    <View style={{ ...styles.container, backgroundColor: darkTheme ? '#282c35' : 'white' }}>
      {index === 0 ? (
        <TouchableOpacity
          onPress={() => setDarkTheme(!darkTheme)}
          style={{ ...styles.left, color: darkTheme ? 'lightgray' : 'gray' }}
        >
          <Ionicons name={darkTheme ? "moon" : "moon-outline"} size={24} color={darkTheme ? "#007fff" : 'gray'} />
          <Text style={{ ...styles.text }}>
          </Text>
        </TouchableOpacity>
      ) : (
        <TouchableOpacity
          style={{ ...styles.left, color: darkTheme ? 'lightgray' : 'gray' }}
          onPress={() => setIndex(index === 0 ? 1 : 0)}
        >
          <Ionicons name="arrow-back" size={24} color={darkTheme ? "#007fff" : 'gray'} />
          <Text style={{ ...styles.text, color: darkTheme ? 'lightgray' : 'gray' }}>
            Discover
          </Text>
        </TouchableOpacity>
      )}
      <Text style={{ ...styles.center, color: darkTheme ? "white" : 'black' }}>
        {index ? "All News" : "Discover"}
      </Text>
      {index ? (
        <TouchableOpacity
          onPress={() => fetchNews('general')}
          style={styles.right}
        >
          <Text style={styles.text}>
            <Ionicons name="refresh" size={24} color={darkTheme ? "#007fff" : 'gray'} />
          </Text>
        </TouchableOpacity>
      ) : (
        <TouchableOpacity
          style={styles.left}
          onPress={() => setIndex(index === 0 ? 1 : 0)}
        >
          <Text style={{ ...styles.text, color: darkTheme ? "white" : 'gray' }}>
            All News
          </Text>
          <Ionicons name="arrow-forward" size={24} color={darkTheme ? "#007fff" : 'gray'} />
        </TouchableOpacity>
      )}
    </View>
  );
};

export default TopNavigation;

const styles = StyleSheet.create({
  container: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    padding: 10,
    alignItems: 'center',
    borderBottomColor: 'black',
    borderBottomWidth: 0.5
  },
  left: {
    flexDirection: 'row',
    alignItems: 'center',
    width: 80,
    justifyContent: 'space-between',
  },
  right: {
    width: 80,
    height: 40,
    justifyContent: 'center',
    paddingRight: 7,
    alignItems: "flex-end",
  },
  center: {
    paddingBottom: 6,
    borderBottomColor: '#007fff',
    borderRadius: 5,
    borderRadius: 10,
    fontSize: 16,
    fontWeight: '700'
  },
  text: {
    fontSize: 16,
    borderBottomColor: '#007fff',
  },
});


================================================================================

File: hooks/useFrameworkReady.ts
Type: .ts
--------------------------------------------------------------------------------
import { useEffect } from 'react';

export function useFrameworkReady() {
  useEffect(() => {
    // Framework initialization code
  }, []);
}


================================================================================

File: API/api.ts
Type: .ts
--------------------------------------------------------------------------------
export const categories = [
  {
    code: "",
    pic: "https://img.icons8.com/fluent/96/000000/news.png",
    name: "general",
  },
  {
    code: "",
    pic: "https://img.icons8.com/fluent/96/000000/hard-working.png",
    name: "business",
  },
  {
    code: "",
    pic: "https://img.icons8.com/fluent/96/000000/movie-projector.png",
    name: "entertainment",
  },
  {
    pic: "https://img.icons8.com/fluent/96/000000/stethoscope.png",
    name: "health",
  },
  {
    pic: "https://img.icons8.com/fluent/96/000000/microscope.png",
    name: "science",
  },
  {
    pic: "https://img.icons8.com/fluent/96/000000/trophy.png",
    name: "sports",
  },
  {
    pic: "https://img.icons8.com/fluent/96/000000/artificial-intelligence.png",
    name: "technology",
  },
];

export const country = [
  {
    code: "in",
    name: "India",
  },
  {
    code: "us",
    name: "USA",
  },
  {
    code: "au",
    name: "Australia",
  },
  {
    code: "ru",
    name: "Russia",
  },
  {
    code: "fr",
    name: "France",
  },
  {
    code: "gb",
    name: "United Kingdom",
  },
];

export const sources = [
  {
    id: "bbc-news",
    name: "BBC News",
    pic: "https://upload.wikimedia.org/wikipedia/commons/thumb/6/62/BBC_News_2019.svg/1200px-BBC_News_2019.svg.png",
  },
  {
    id: "cnn",
    name: "CNN",
    pic: "https://bankimooncentre.org/wp-content/uploads/2020/06/cnn-logo-square.png",
  },
  {
    id: "fox-news",
    name: "Fox News",
    pic: "https://upload.wikimedia.org/wikipedia/commons/thumb/6/67/Fox_News_Channel_logo.svg/768px-Fox_News_Channel_logo.svg.png",
  },
  {
    id: "google-news",
    name: "Google News",
    pic: "https://upload.wikimedia.org/wikipedia/commons/0/0b/Google_News_icon.png",
  },
];

// Using a free news API for the clone - you might need to replace with your own API key
export const BASE_URL = "https://newsapi.org/v2";
export const API_KEY = "dfcada130cb747099bdadec698a9c1cc"; // Replace with your news API key

export const getNewsAPI = (category: string, country = "in") => {
  return `${BASE_URL}/top-headlines?country=${country}&category=${category}&apiKey=${API_KEY}`;
};

export const getSourceAPI = (source: string) => {
  return `${BASE_URL}/top-headlines?sources=${source}&apiKey=${API_KEY}`;
};


================================================================================

File: API/Context.tsx
Type: .tsx
--------------------------------------------------------------------------------
import React, { createContext, useEffect, useState, ReactNode } from "react";
import axios from "axios";
import { getNewsAPI, getSourceAPI } from "./api";
import AsyncStorage from "@react-native-async-storage/async-storage";

type NewsItem = {
  source: { id: string; name: string };
  author: string;
  title: string;
  description: string;
  url: string;
  urlToImage: string;
  publishedAt: string;
  content: string;
};

type NewsType = {
  articles: NewsItem[];
  status: string;
  totalResults: number;
};

type NewsContextType = {
  news: NewsType | null;
  category: string;
  index: number;
  darkTheme: boolean;
  loading: boolean;
  bookmarks: string[]; // Array of article URLs that are bookmarked
  setCategory: (category: string) => void;
  setIndex: (index: number) => void;
  fetchNews: (category?: string) => Promise<void>;
  setSource: (source: string) => void;
  setDarkTheme: (darkTheme: boolean) => void;
  toggleBookmark: (url: string) => void;
  isBookmarked: (url: string) => boolean;
};

export const NewsContext = createContext<NewsContextType>({} as NewsContextType);

type ContextProviderProps = {
  children: ReactNode;
};

const Context = ({ children }: ContextProviderProps) => {
  const [loading, setLoading] = useState(false);
  const [news, setNews] = useState<NewsType | null>(null);
  const [category, setCategory] = useState("general");
  const [source, setSource] = useState("bbc-news");
  const [index, setIndex] = useState(1);
  const [darkTheme, setDarkTheme] = useState(false);
  const [bookmarks, setBookmarks] = useState<string[]>([]);

  // Load saved bookmarks and theme on startup
  useEffect(() => {
    const loadSavedSettings = async () => {
      try {
        // Load saved theme preference
        const savedTheme = await AsyncStorage.getItem('darkTheme');
        if (savedTheme !== null) {
          setDarkTheme(savedTheme === 'true');
        }

        // Load saved bookmarks
        const savedBookmarks = await AsyncStorage.getItem('bookmarks');
        if (savedBookmarks !== null) {
          setBookmarks(JSON.parse(savedBookmarks));
        }
      } catch (error) {
        console.error('Error loading saved settings:', error);
      }
    };

    loadSavedSettings();
  }, []);

  // Save theme preference when it changes
  useEffect(() => {
    const saveThemePreference = async () => {
      try {
        await AsyncStorage.setItem('darkTheme', darkTheme.toString());
      } catch (error) {
        console.error('Error saving theme preference:', error);
      }
    };

    saveThemePreference();
  }, [darkTheme]);

  // Save bookmarks when they change
  useEffect(() => {
    const saveBookmarks = async () => {
      try {
        await AsyncStorage.setItem('bookmarks', JSON.stringify(bookmarks));
      } catch (error) {
        console.error('Error saving bookmarks:', error);
      }
    };

    saveBookmarks();
  }, [bookmarks]);

  const fetchNews = async (rest: string = category) => {
    setLoading(true);
    try {
      const response = await axios.get(getNewsAPI(rest));
      if (response.data && response.data.articles) {
        setNews(response.data);
        setIndex(1);
      } else {
        console.error('Invalid response format:', response.data);
      }
    } catch (error) {
      console.error(`Error Fetching News: `, error);
    } finally {
      setLoading(false);
    }
  };

  const fetchNewsFromSource = async () => {
    setLoading(true);
    try {
      const response = await axios.get(getSourceAPI(source));
      if (response.data && response.data.articles) {
        setNews(response.data);
        setIndex(1);
      } else {
        console.error('Invalid response format:', response.data);
      }
    } catch (error) {
      console.error(`Error Fetching News from Source: `, error);
    } finally {
      setLoading(false);
    }
  };

  // Function to toggle bookmark status
  const toggleBookmark = (url: string) => {
    if (bookmarks.includes(url)) {
      // Remove from bookmarks
      setBookmarks(bookmarks.filter(bookmark => bookmark !== url));
    } else {
      // Add to bookmarks
      setBookmarks([...bookmarks, url]);
    }
  };

  // Check if a URL is bookmarked
  const isBookmarked = (url: string): boolean => {
    return bookmarks.includes(url);
  };

  useEffect(() => {
    fetchNews();
  }, [category]);

  useEffect(() => {
    fetchNewsFromSource();
  }, [source]);

  return (
      <NewsContext.Provider
          value={{
            news,
            category,
            index,
            darkTheme,
            loading,
            bookmarks,
            setCategory,
            setIndex,
            fetchNews,
            setSource,
            setDarkTheme,
            toggleBookmark,
            isBookmarked,
          }}
      >
        {children}
      </NewsContext.Provider>
  );
};

export default Context;

================================================================================


Scan Summary
================================================================================
Total files scanned: 24

Files by type:
.js: 3 files
.json: 5 files
.md: 1 files
.ts: 3 files
.tsx: 11 files
.txt: 1 files
